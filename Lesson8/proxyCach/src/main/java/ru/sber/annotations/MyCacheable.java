package ru.sber.annotations;

import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyCacheable {


    /**
     * Указывает, где хранить кеш: MEMORY или DISK
     */
    StorageType storageType() default StorageType.MEMORY;

    /**
     * Указывает аргументы, которые следует учитывать при создании ключа
     * от 1 до args
     */
    int[] includeArgs() default {};

    /**
     * Ограничение размера списка для возврата, если возвращаемый тип - List, что позволяет сохранять только первые
     * N элементов, которые наиболее важны.
     * Если метод возвращает список, который больше ожидаемого размера, мы "обрезаем" его до нужного количества
     * элементов, чтобы соответствовать бизнес-логике.
     * Пример:
     * метод возвращает список, и в аннотации указано maxListSize = 100. В этом случае:
     * - Если возвращаемый список содержит 250 элементов, в кеш попадут только первые 100 элементов.
     * - Если список меньше указанного значения (например, 50 элементов), в кеш попадет весь список.
     */
    int maxListSize() default Integer.MAX_VALUE;

    /**
     * Название файла/ключа для хранения результата (по умолчанию - имя метода)
     */
    String fileName() default "";

    /**
     * Указывает, нужно ли сжимать файл в zip
     */
    boolean zip() default false;

    /**
     * Время жизни кеша (в миллисекундах, по умолчанию - бесконечно)
     */
    long ttl() default -1;

    enum StorageType {
        MEMORY, DISK
    }
}
